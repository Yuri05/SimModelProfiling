/*
*	DCI Math Module Implementation
*
*	(C) 2002-2003 Bayer AG Leverkusen, BTS-PT-AS-CS
*
*	Project: Data Mining / DCI
*	Author:  Dirk ter Huerne (ZTMEY)
*
*   THIS SOFTWARE IS PROVIDED BY THE BAYER TECHNOLOGY SERVICES GMBH "AS IS"
*	AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
*	IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
*	ARE DISCLAIMED.
*	IN NO EVENT SHALL THE BAYER AG NOR THE AUTHOR OF THIS CODE BE LIABLE FOR
*	ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
*	DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
*	SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
*	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
*	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
*	OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
*	SUCH DAMAGE.
*/

#include "DCI/Math.h"
#include <ymath.h>

namespace DCI {

Double Math::GetNaN() {
    return _Nan._Double;
}

Bool Math::IsNaN(Double d) {
	return _isnan(d)?true:false;
}

Double Math::GetInf() {
    return _Inf._Double;
}

Double Math::GetNegInf() {
    return -_Inf._Double;
}

Bool Math::IsFinite(Double d) {
    return _finite(d)?true:false;
}

} /* namespace DCI */
